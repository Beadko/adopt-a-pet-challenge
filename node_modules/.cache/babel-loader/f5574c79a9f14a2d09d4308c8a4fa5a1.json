{"ast":null,"code":"import _classCallCheck from \"/Users/bea/Desktop/DevProject/adopt-a-pet-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/bea/Desktop/DevProject/adopt-a-pet-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/bea/Desktop/DevProject/adopt-a-pet-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/bea/Desktop/DevProject/adopt-a-pet-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/bea/Desktop/DevProject/adopt-a-pet-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { R as RequestHandler, e as getUrlByMask, m as matchRequestUrl, g as getPublicUrlFromRequest, f as prepareRequest, h as prepareResponse, i as getTimestamp, j as getStatusCodeColor } from './RequestHandler-deps.js';\nimport { b as set, s as status, e as json, d as delay, f as fetch } from './fetch-deps.js';\nimport { c as cookie, b as body, t as text, x as xml } from './xml-deps.js';\n/**\r\n * Performs a case-insensitive comparison of two given strings.\r\n */\n\nfunction isStringEqual(actual, expected) {\n  return actual.toLowerCase() === expected.toLowerCase();\n}\n\nvar RESTMethods;\n\n(function (RESTMethods) {\n  RESTMethods[\"HEAD\"] = \"HEAD\";\n  RESTMethods[\"GET\"] = \"GET\";\n  RESTMethods[\"POST\"] = \"POST\";\n  RESTMethods[\"PUT\"] = \"PUT\";\n  RESTMethods[\"PATCH\"] = \"PATCH\";\n  RESTMethods[\"OPTIONS\"] = \"OPTIONS\";\n  RESTMethods[\"DELETE\"] = \"DELETE\";\n})(RESTMethods || (RESTMethods = {}));\n\nvar restContext = {\n  set: set,\n  status: status,\n  cookie: cookie,\n  body: body,\n  text: text,\n  json: json,\n  xml: xml,\n  delay: delay,\n  fetch: fetch\n};\n/**\r\n * Request handler for REST API requests.\r\n * Provides request matching based on method and URL.\r\n */\n\nvar RestHandler = /*#__PURE__*/function (_RequestHandler) {\n  _inherits(RestHandler, _RequestHandler);\n\n  function RestHandler(method, mask, resolver) {\n    var _this;\n\n    _classCallCheck(this, RestHandler);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RestHandler).call(this, {\n      info: {\n        header: \"\".concat(method, \" \").concat(mask),\n        mask: mask,\n        method: method\n      },\n      ctx: restContext,\n      resolver: resolver\n    }));\n\n    _this.checkRedundantQueryParameters();\n\n    return _this;\n  }\n\n  _createClass(RestHandler, [{\n    key: \"checkRedundantQueryParameters\",\n    value: function checkRedundantQueryParameters() {\n      var _this$info = this.info,\n          method = _this$info.method,\n          mask = _this$info.mask;\n      var resolvedMask = getUrlByMask(mask);\n\n      if (resolvedMask instanceof URL && resolvedMask.search !== '') {\n        var queryParams = [];\n        resolvedMask.searchParams.forEach(function (_, paramName) {\n          queryParams.push(paramName);\n        });\n        console.warn(\"[MSW] Found a redundant usage of query parameters in the request handler URL for \\\"\".concat(method, \" \").concat(mask, \"\\\". Please match against a path instead, and access query parameters in the response resolver function:\\n\\nrest.\").concat(method.toLowerCase(), \"(\\\"\").concat(resolvedMask.pathname, \"\\\", (req, res, ctx) => {\\n  const query = req.url.searchParams\\n\").concat(queryParams.map(function (paramName) {\n          return \"  const \".concat(paramName, \" = query.get(\\\"\").concat(paramName, \"\\\")\");\n        }).join('\\n'), \"\\n})      \"));\n      }\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(request) {\n      return matchRequestUrl(request.url, this.info.mask);\n    }\n  }, {\n    key: \"getPublicRequest\",\n    value: function getPublicRequest(request, parsedResult) {\n      return Object.assign(Object.assign({}, request), {\n        params: parsedResult.params || {}\n      });\n    }\n  }, {\n    key: \"predicate\",\n    value: function predicate(request, parsedResult) {\n      return isStringEqual(this.info.method, request.method) && parsedResult.matches;\n    }\n  }, {\n    key: \"log\",\n    value: function log(request, response) {\n      var publicUrl = getPublicUrlFromRequest(request);\n      var loggedRequest = prepareRequest(request);\n      var loggedResponse = prepareResponse(response);\n      console.groupCollapsed('[MSW] %s %s %s (%c%s%c)', getTimestamp(), request.method, publicUrl, \"color:\".concat(getStatusCodeColor(response.status)), response.status, 'color:inherit');\n      console.log('Request', loggedRequest);\n      console.log('Handler:', {\n        mask: this.info.mask,\n        resolver: this.resolver\n      });\n      console.log('Response', loggedResponse);\n      console.groupEnd();\n    }\n  }]);\n\n  return RestHandler;\n}(RequestHandler);\n\nfunction createRestHandler(method) {\n  return function (mask, resolver) {\n    return new RestHandler(method, mask, resolver);\n  };\n}\n\nvar rest = {\n  head: createRestHandler(RESTMethods.HEAD),\n  get: createRestHandler(RESTMethods.GET),\n  post: createRestHandler(RESTMethods.POST),\n  put: createRestHandler(RESTMethods.PUT),\n  delete: createRestHandler(RESTMethods.DELETE),\n  patch: createRestHandler(RESTMethods.PATCH),\n  options: createRestHandler(RESTMethods.OPTIONS)\n};\nexport { RestHandler as R, RESTMethods as a, restContext as b, isStringEqual as i, rest as r };","map":null,"metadata":{},"sourceType":"module"}