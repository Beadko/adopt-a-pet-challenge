{"ast":null,"code":"import _slicedToArray from \"/Users/bea/Desktop/DevProject/adopt-a-pet-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { j as jsonParse, e as json } from './fetch-deps.js';\n/**\r\n * Determines if the given value is an object.\r\n */\n\nfunction isObject(value) {\n  return value != null && typeof value === 'object' && !Array.isArray(value);\n}\n/**\r\n * Deeply merges two given objects with the right one\r\n * having a priority during property assignment.\r\n */\n\n\nfunction mergeRight(left, right) {\n  return Object.entries(right).reduce(function (result, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        rightValue = _ref2[1];\n\n    var leftValue = result[key];\n\n    if (Array.isArray(leftValue) && Array.isArray(rightValue)) {\n      result[key] = leftValue.concat(rightValue);\n      return result;\n    }\n\n    if (isObject(leftValue) && isObject(rightValue)) {\n      result[key] = mergeRight(leftValue, rightValue);\n      return result;\n    }\n\n    result[key] = rightValue;\n    return result;\n  }, Object.assign({}, left));\n}\n/**\r\n * Sets a given payload as a GraphQL response body.\r\n * @example\r\n * res(ctx.data({ user: { firstName: 'John' }}))\r\n * @see {@link https://mswjs.io/docs/api/context/data `ctx.data()`}\r\n */\n\n\nvar data = function data(payload) {\n  return function (res) {\n    var prevBody = jsonParse(res.body) || {};\n    var nextBody = mergeRight(prevBody, {\n      data: payload\n    });\n    return json(nextBody)(res);\n  };\n};\n/**\r\n * Sets a given list of GraphQL errors on the mocked response.\r\n * @example res(ctx.errors([{ message: 'Unauthorized' }]))\r\n * @see {@link https://mswjs.io/docs/api/context/errors}\r\n */\n\n\nvar errors = function errors(errorsList) {\n  return function (res) {\n    if (errorsList == null) {\n      return res;\n    }\n\n    var prevBody = jsonParse(res.body) || {};\n    var nextBody = mergeRight(prevBody, {\n      errors: errorsList\n    });\n    return json(nextBody)(res);\n  };\n};\n\nexport { data as d, errors as e, mergeRight as m };","map":null,"metadata":{},"sourceType":"module"}